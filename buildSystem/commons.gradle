import java.util.regex.Pattern

def versionName

task gitPull(type: Exec) {
    description 'Pulls git.'
    commandLine "git", "pull"
}

task gitAdd(type: Exec) {
    description 'Add git.'
    commandLine "git", "add", "-A"
}

task gitCommit(type: Exec) {
    description 'Commit git.'
    commandLine "git", "commit", "-m 'update library'"
}

task gitPush(type: Exec) {
    description 'Push git.'
    commandLine "git", "push"
}

task gitTag(type: Exec) {
    description 'Tag git.'
    commandLine "git", "tag", "-a", versionName, "-m 'releaseTest'"
}

task uploadLibrary << {
    tasks.gitPull.execute()
    tasks.gitAdd.execute()
    tasks.gitCommit.execute()
    tasks.gitTag.execute()
    tasks.gitPush.execute()
}

task incrementBuildVersion << {
    println(":increaseVersion - Incrementing library version...")
    def gradlePropsFile = file('../gradle.properties')
    if (gradlePropsFile.canRead()) {

        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(gradlePropsFile))

        versionName = versionProps['VERSION_NAME']
        def patternVersionNumber = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)")
        def matcherVersionNumber = patternVersionNumber.matcher(versionName)
        if (matcherVersionNumber.find()) {
            def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
            def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
            def buildVersion = Integer.parseInt(matcherVersionNumber.group(3)) + 1
            versionName = majorVersion + "." + minorVersion + "." + buildVersion
            versionProps['VERSION_NAME'] = matcherVersionNumber.replaceAll(versionName)
        }
        versionProps.store(gradlePropsFile.newWriter(), null)
        tasks.uploadLibrary.execute()
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

task incrementMinorVersion << {
    println(":increaseVersion - Incrementing library version...")
    def gradlePropsFile = file('../gradle.properties')
    if (gradlePropsFile.canRead()) {

        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(gradlePropsFile))

        versionName = versionProps['VERSION_NAME']
        def patternVersionNumber = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)")
        def matcherVersionNumber = patternVersionNumber.matcher(versionName)
        if (matcherVersionNumber.find()) {
            def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
            def minorVersion = Integer.parseInt(matcherVersionNumber.group(2)) + 1
            def buildVersion = Integer.parseInt(matcherVersionNumber.group(3))
            versionName = majorVersion + "." + minorVersion + "." + buildVersion
            versionProps['VERSION_NAME'] = matcherVersionNumber.replaceAll(versionName)
        }
        versionProps.store(gradlePropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}