apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.raxdenstudios'
version = '2.2.0'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

}

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')

    compile 'com.google.android.gms:play-services:8.4.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'

    compile 'me.dm7.barcodescanner:zxing:1.8.3'

    compile 'com.github.raxden:AndroidCommons:v2.1.29@aar'
    compile 'com.github.raxden:AndroidDB:v2.1.7@aar'
    compile 'com.github.raxden:AndroidRater:v2.1.7@aar'
    compile 'com.github.raxden:AndroidGCM:v2.1.16@aar'
    compile 'com.github.raxden:AndroidAnalytics:v2.1.7@aar'
    compile 'com.github.raxden:AndroidShakeDetector:v2.1.4@aar'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}
